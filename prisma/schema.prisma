// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String       @id @default(uuid())
  name               String
  userName           String
  password           Password?
  email              Email?
  admin              Admin[]
  company            Company?     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId          String?
  companiesCreated   Company[]    @relation("CompanyCreatedBy")
  sentInvitaions     Invitation[] @relation("Userinvting")
  receivedInvitaions Invitation[] @relation("UserInvited")
  tokens             Token[]
}

model Password {
  id        String    @id @default(uuid())
  hash      String
  salt      String
  setAt     DateTime  @default(now())
  updatedAt DateTime?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String    @unique

  @@map("Passwords")
}

model Token {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  token     String
}

model Email {
  id           String    @id @default(uuid())
  emailAddress String    @unique
  updatedAt    DateTime?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String    @unique
}

model Admin {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  companies Company[]
}

model Company {
  id         String     @id @default(uuid())
  name       String
  location   String?
  creator    User       @relation("CompanyCreatedBy", fields: [creatorId], references: [id])
  creatorId  String
  categories Category[]
  users      User[]
  admin      Admin      @relation(fields: [adminId], references: [id], onDelete: Cascade)

  adminId     String
  invitations Invitation[]
  products    Product[]
}

model Category {
  id          String    @id @default(uuid())
  name        String
  refNo       String?
  dateAdded   DateTime  @default(now())
  description String?
  products    Product[]
  company     Company   @relation(fields: [companyId], references: [id])
  companyId   String

  @@map("categories")
}

model Variant {
  id           String    @id @default(uuid())
  dateAdded    DateTime  @default(now())
  quantity     Int
  unitPrice    Float
  sellingPrice Float?
  description  String?
  expDate      DateTime?
  manDate      DateTime?
  batch        String?
  rate         Float?
}

model Product {
  id           String      @id @default(uuid())
  name         String
  refNo        String?
  company      Company     @relation(fields: [companyId], references: [id])
  companyId    String
  category     Category    @relation(fields: [categoryId], references: [id])
  categoryId   String
  dateAdded    DateTime    @default(now())
  quantity     Int
  unitPrice    Float
  sellingPrice Float?
  description  String?
  salesItems   SalesItem[]
  expDate      DateTime?
  manDate      DateTime?
  batch        String?
  rate         Float?

  @@map("products")
}

model Sales {
  id           String      @id @default(uuid())
  items        SalesItem[]
  date         DateTime    @default(now())
  customerName String?     @default("N/A")
  refNo        String?
  totalAmount  Int?
}

model SalesItem {
  id         String  @id @default(uuid())
  product    Product @relation(fields: [productId], references: [id])
  productId  String
  quantity   Int
  unitPrice  Int
  totalPrice Int?
  sales      Sales?  @relation(fields: [salesId], references: [id])
  salesId    String?
}

model Invitation {
  id        String  @id @default(uuid())
  invitor   User    @relation("Userinvting", fields: [invitorId], references: [id])
  invitee   User    @relation("UserInvited", fields: [inviteeId], references: [id])
  invitorId String
  inviteeId String
  company   Company @relation(fields: [companyId], references: [id])
  salesId   String?
  companyId String
}
